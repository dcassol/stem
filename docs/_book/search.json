[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"","code":""},{"path":"index.html","id":"about","chapter":"Welcome","heading":"About","text":"repository containers RNA-seq pipeline, docker container sample data testing.\nPipelines written WDL language Cromwell workflow execution engine used run .","code":""},{"path":"index.html","id":"is-this-workflow-useful-for-you","chapter":"Welcome","heading":"Is this workflow useful for you?","text":"Expected outputFastqc Quality ReportReads Trimming TrimmomaticAlign Reads Reference Genome using HISAT2 (BAM files)Expression quantification using summarizeOverlaps (GenomicFeatures) (Lawrence et al. 2013)Differential Expression Matrix using DESeq2Create Feature set Filtered Differential Expression Matrix","code":""},{"path":"index.html","id":"quick-start---no-installation-required","chapter":"Welcome","heading":"Quick Start - No Installation required","text":"Now, can test edit pipeline data. details, please\ncheck Sample Data section. fun!","code":"docker run  -dP dcassol/wdl_rnaseq\ndocker ps \ndocker exec -it <IMAGE NAME> /bin/bash\ncromwell run rnaseq.wdl -i rnaseq.json -o rnaseq.options.json "},{"path":"index.html","id":"quick-start","chapter":"Welcome","heading":"Quick Start","text":"Step 1: Clone git repository directory computer:Note: Ensure correct permissions run pipeline - using Docker.\nsection provided containing details running HPC environment.Step 2: run pipeline use command :Please, make sure use correct PATH cromwell-72.jar file.","code":"https://github.com/dcassol/wdl_rnaseq.gitcromwell run rnaseq.wdl -i rnaseq.json -o rnaseq.options.json \n## OR\njava -jar cromwell-72.jar run rnaseq.wdl -i rnaseq.json -o rnaseq.options.json\nlibrary(readr)  # For reading CSV files\nlibrary(dplyr)  # For data manipulation"},{"path":"index.html","id":"import-csv","chapter":"Welcome","heading":"0.1 Import csv","text":"","code":"\noccupation_by_state <- read.csv(\"data/occupation.csv\")\nhead(occupation_by_state)\nfiltered_data <- occupation_by_state %>%\n  filter(grepl(\"B24020_019|B24020_170\", variable, ignore.case = TRUE))\n\nproportions <- filtered_data %>%\n  group_by(Year, NAME, sex) %>%  # Assuming 'NAME' is the state name\n  summarise(total_estimate = sum(estimate, na.rm = TRUE), .groups = 'drop') %>%\n  group_by(Year, NAME) %>%\n  mutate(proportion = total_estimate / sum(total_estimate)) %>%\n  select(Year, NAME, sex, proportion)\n\n\nproportions <- proportions %>%\n  mutate(proportion = proportion * 100) \n# Library for interactive visualization\n# Library for interactive visualization\nlibrary(plotly)\n\n# Get unique states\nstate_levels <- unique(proportions$NAME)\n\n# Prepare the buttons for the dropdown menu for state selection\nbuttons <- lapply(state_levels, function(state) {\n  list(method = \"update\",\n       args = list(list(visible = sapply(proportions$NAME, function(x) x == state)),\n                   list(title = paste(\"Proportion of Male/Female in\", state, \"over the Years\"))),\n       label = state)\n})\n\n# Create the plot with all traces initially visible but will toggle with dropdown\nplot <- plot_ly()\n\n# Loop through each state to add traces for Male and Female\nfor (state in state_levels) {\n  plot <- plot %>%\n    add_trace(data = proportions[proportions$NAME == state & proportions$sex == \"Male\", ],\n              x = ~Year, y = ~proportion, mode = 'lines+markers',\n              name = paste(\"Male\", state), visible = state == state_levels[1],  # Visibility set for the first state\n              line = list(color = 'blue', width = 4)) %>%\n    add_trace(data = proportions[proportions$NAME == state & proportions$sex == \"Female\", ],\n              x = ~Year, y = ~proportion, type = 'scatter', mode = 'lines+markers',\n              name = paste(\"Female\", state), visible = state == state_levels[1],  # Visibility set for the first state\n              line = list(color = 'red'), marker = list(size = 7))\n}\n\n# Final layout configuration\nplot <- plot %>%\n  layout(title = \"Proportion of Male/Female over the Years by State\",\n         xaxis = list(title = 'Year'),\n         yaxis = list(title = 'Percentage', range = c(0, 100)),\n         hovermode = 'closest',\n         showlegend = TRUE,\n         updatemenus = list(\n           list(\n             x = 0.0,\n             xanchor = 'left',\n             y = 1.0,\n             yanchor = 'top',\n             buttons = buttons\n           )\n         ))\n\n# Render the plot\nplot"}]
